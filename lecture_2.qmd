---
title: |
  | [Day 2]{style="color:coral;font-size:1em"} 
  | [데이터 수집 및 정련화]{style="font-size:1.2em"}
author: 이상일(서울대학교 지리교육과 교수)
date: 2024-08-06
format: 
  revealjs:
    logo: aiedap_logo.png
    footer: "사회과 예비교사를 위한 AIㆍ디지털 역량강화 워크숍"
    transition: fade
    transition-speed: fast
    margin: 0.05
    smaller: false
    scrollable: false
    code-link: true
    code-overflow: scroll
    slide-number: true
    pointer:
      pointerSize: 20
      color: red
    menu: true
    embed-resources: false
    theme: [default, custom.scss]
    revealjs-plugins:
      - pointer
code-link: true
execute: 
  warning: false
  error: false
  freeze: auto  
dpi: 300
editor: visual
# suppress-bibliography: true
---

## 데이터사이언스 과정의 첫 번째와 두 번째 단계

![[https://r4ds.hadley.nz](https://r4ds.hadley.nz/intro){.uri}[/](https://r4ds.hadley.nz/intro){.uri style="font-size:0.75rem"}[intro](https://r4ds.hadley.nz/intro){.uri}](images/clipboard-4075247197.png){fig-align="center"}

## 내용

-   데이터 수집하기

    -   웹스크레이핑(webscraping)

    -   오픈 API의 활용

-   데이터 불러오기

-   데이터 정돈하기

# [데이터 수집하기: 웹스크레이핑]{style="color:coral"}

## 정의

-   웹페이지로부터 데이터를 추출하는 것, 데이터 긁어 오기
-   데이터 크롤링(crawling)과 유사, 박박 기면서 수집하기
-   해킹(hacking)과의 경계가 모호
    -   허가 없이 정보 시스템에 침투하는 행위(데이터를 취득하는 행위)
-   최근들어 점점 회피하는 추세

## HTML의 정의

-   HyperText Markup Language, 하이퍼텍스터 마크업 언어

    -   웹 브라우저를 통해 표출되는 사항(무엇이 어떻게)을 프로그래밍하는 마크업(markup) 언어

        -   마크업 언어: 다큐먼트의 구조와 포맷을 관장하는 텍스트-엔코딩 시스템으로 HTML과 XML이 대표적

-   마크다운(markdown) 언어

    -   사용자의 편이성이 강화된 마크업 언어

    -   예: Quarto

## HTML의 기초 1

::: r-fit-text
-   웹페이지는 다양한 태그(tag)로 구성

    -   각 태그는 시작 태그와 종료 태그로 구성되며, 둘 사이에 해당 콘텐츠가 위치

    -   태그로 규정되는 개별 단위: 엘리먼트(element)

-   태그의 종류는 다양하며, 크게 세 가지로 구분

    -   최상위인 html 태그

    -   웹페이지의 전반적인 구조를 결정하는 블록(block) 태그

        -   예: h1, section, p, ol 태그 등

    -   블록 태그 내부의 특정 부분에만 적용되는 인라인(inline) 태그

        -   예: b, i, a 태그 등
:::

## HTML의 기초 2

-   태그들은 복잡한 다단계 구조를 이룸

-   태그는 속성(attribute)를 가질 수 있음

    -   특별히 중요한 속성: 클래스(class), 아이디(id)

    -   p나 div 태그와 같은 블록 태그: height, width, margin, padding

    -   img 태그: src, alt, width, height

    -   a 태그: href

## 

![[https://odinuv.cz/articles/html/](https://odinuv.cz/articles/html/){.uri style="font-size:0.75rem"}](images/clipboard-613748476.png){fig-align="center"}

## HTML 엘리먼트의 선택

::: r-fit-text
-   HTML 엘리먼트

    -   태그와 속성으로 구성된 HTML의 한 단위 혹은 특정 부분

    -   웹스크레이핑의 타깃의 주소

-   HTML 엘리먼트의 선택: CSS(casading style sheet) 선택자(selector)

| 선택 대상              | CSS 선택자     | 결과                                                                                      |
|----------------|----------------|----------------------------------------|
| 태그(tag)              | tag1           | "tag1"이라는 이름의 모든 tag                                                              |
| 클래스(class)          | .class1        | "class1"이라는 class 속성을 갖는 모든 요소                                                |
| 아이디(id)             | #id1           | "id1"이라는 id 속성을 갖는 모든 요소                                                      |
| tag와 class의 결합     | tag1.class1    | "tag1"이라는 tag의 "class1"이라는 class 속성을 갖는 모든 요소                             |
| class1과 class2의 결합 | .class1.class2 | "class1"이라는 이름의 class 속성과 "class2"라는 이름의 class 속성을 동시에 갖는 모든 요소 |
:::

## HTML 엘리먼트의 선택 {.unscrollable}

-   정확한 선택자의 확인

    -   웹페이지에서 오른쪽 마우스 버튼을 눌러 "검사" 선택한 뒤, 탐색

    -   브라우저 확장 프로그램의 활용: [SelectGadget](https://chromewebstore.google.com/detail/selectorgadget/mhjhnkcfbdhnjickkkdbjoemdmbfginb?pli=1)

## `rvest` 패키지

![[https://rvest.tidyverse.org/](https://rvest.tidyverse.org/){.uri style="font-size:0.75rem"}](images/clipboard-1209836452.png){fig-align="center"}

## 단계

-   1단계: 웹페이지 읽기

    -   웹스크레이핑의 대상이 되는 웹페이지의 URL 읽기

-   2단계: HTML 엘리먼트의 선택

    -   필요한 정보를 포함하고 있는 엘리먼트의 특정

-   3단계: 하위 엘리먼트의 선택

    -   필요한 정보를 포함하고 있는 하위 엘리먼트의 특정

-   4단계: 엘리먼트로부터 데이터를 추출

    -   데이블 데이터, 텍스트 등을 추출

## 사례

[vignette("starwars")](https://rvest.tidyverse.org/articles/starwars.html)

```{r}
#| eval: false
#| echo: true
<section>
  <h2 data-id="1">The Phantom Menace</h2>
  <p>Released: 1999-05-19</p>
  <p>Director: <span class="director">George Lucas</span></p>
  
  <div class="crawl">
    <p>...</p>
    <p>...</p>
    <p>...</p>
  </div>
</section>
```

## 사례

::: panel-tabset
## Code

```{r}
#| echo: true
#| eval: false
library(tidyverse)
library(rvest)
url <- "https://rvest.tidyverse.org/articles/starwars.html"
read_html(url) |> 
  html_elements("section") |> 
  html_element("h2") |> 
  html_text2()
```

## Result

```{r}
library(rvest)
library(tidyverse)
url <- "https://rvest.tidyverse.org/articles/starwars.html"
read_html(url) |> 
  html_elements("section") |> 
  html_element("h2") |> 
  html_text2()
```
:::

## 사례

::: panel-tabset
## Code

```{r}
#| echo: true
#| eval: false
section <- read_html(url) |> 
  html_elements("section")
tibble(
  title = section |> 
    html_element("h2") |> 
    html_text2(),
  released = section |> 
    html_element("p") |> 
    html_text2() |> 
    str_remove("Released: ") |> 
    parse_date(),
  director = section |> 
    html_element(".director") |> 
    html_text2(),
  intro = section |> 
    html_element(".crawl") |> 
    html_text2()
)
```

## Result

```{r}
section <- read_html(url) |> 
  html_elements("section")
tibble(
  title = section |> 
    html_element("h2") |> 
    html_text2(),
  released = section |> 
    html_element("p") |> 
    html_text2() |> 
    str_remove("Released: ") |> 
    parse_date(),
  director = section |> 
    html_element(".director") |> 
    html_text2(),
  intro = section |> 
    html_element(".crawl") |> 
    html_text2()
)
```
:::

# [데이터 수집하기: API의 활용]{style="color:coral"}

## 정의 {.smaller}

-   API(application programming interface)는 일종의 통신 규칙으로, 허가 받은 사용자가 데이터 원천에 접근하여 데이터를 수집

    -   복수의 프로그램들이 서로 상호작용하는 방법을 정의하는 일련의 규칙

    -   한 애플리케이션이 다른 애플리케이션의 기능들을 불러 사용할 수 있게 해주는 통로

-   데이터를 보유하고 있는 공적 기관이 데이터의 사용 권한을 사용자들에게 부여함으로써 데이터에 대한 접근성을 높여주는 일련의 방식

    -   오픈 API, API 키

## API 활용의 다양성 {.smaller}

-   테이블 데이터의 수집

    -   [KOSIS의 API](https://kosis.kr/openapi/)를 활용한 센서스 데이터 수집

    -   [공공데이터포털 API](https://www.data.go.kr/ugs/selectPublicDataUseGuideView.do)를 활용한 지역별 미세먼지 농도 데이터 수집

    -   [International Database(IDB)의 API](https://www.census.gov/data/developers/data-sets/international-database.html)를 활용한 세계 인구 데이터 수집

-   정형 텍스트 데이터 수집

    -   [공공데이터포털 API](https://www.data.go.kr/ugs/selectPublicDataUseGuideView.do)를 활용한 학위 논문 수집

-   비정형 텍스트 데이터 수집: 텍스트 마이닝(text mining)으로 연결

    -   [네이버 검색 API](https://developers.naver.com/)를 활용한 뉴스 데이터 수집

    -   [유튜브 API](https://console.cloud.google.com/apis/)를 활용한 댓글 데이터 수집

## API 활용의 다양성 {.smaller}

-   Google Maps Platform (<https://mapsplatform.google.com/>)

-   7 종류의 API

    -   Google Direction API

    -   Google Distance API

    -   Google Elevation API

    -   Google Timezone API

    -   Google Geocode API

    -   Google Reverse Geocode API

    -   Google Places API

-   R 래퍼 패키지: [googleway](https://github.com/SymbolixAU/googleway)

## NAVER 뉴스 데이터 {.smaller}

-   NAVER Developer(<https://developers.naver.com/>)

-   오픈 API 신청 절차

    -   비로그인 방식 오픈 API: ’검색’ 카테고리(뉴스, 백과사전, 블로그 등)

    -   '개발 가이드 보기'

        -   ClientID와 CLient Secret 개념

        -   요청 URL: https://openapi.naver.com/v1/search/news.json

        -   파라미터: query, display, start, sort

    -   '오픈 API 신청'

        -   애플리케이션 이름: 아무 이름이나 입력

        -   사용 API: '검색'이 선택된 상태를 유지

        -   비로그인 오픈 API 서비스 환경: 'WEB 설정'을 선택

        -   웹 서비스 URL(최대 10개): 'http://localhost'를 입력

## `httr2` 패키지

![[https://httr2.r-lib.org/](https://httr2.r-lib.org/){.uri style="font-size:0.75rem"}](images/clipboard-2579380411.png){fig-align="center"}

## '지방소멸' 뉴스 검색 데이터 수집 {.smaller}

```{r}
#| echo: false
your_ClientID <- "hYwglpLz9Cq8Oyn6hzgE"
your_Client_Secret <- "m7onDeHfwe"
```

::: panel-tabset
## 코드

```{r}
#| echo: true
#| eval: false
library(httr2)
search <- "지방소멸"
base_url <- "https://openapi.naver.com/v1/search/news.json"
result_naver <- request(base_url) |> 
  req_headers(
    "X-Naver-Client-ID" = your_ClientID,
    "X-Naver-Client-Secret" = your_Client_Secret
  ) |> 
  req_url_query(
    query = search,
    display = 100,
    start = 1,
    sort = "date"
  ) |> 
  req_perform() |> 
  resp_body_json() 
naver_tb <- tibble(naver = result_naver$items)
naver_res <- naver_tb |> 
  unnest_wider(naver)
naver_res |> slice_head(n = 10)
```

## 결과

```{r}
library(httr2)
search <- "지방소멸"
your_url <- "https://openapi.naver.com/v1/search/news.json"
result_naver <- request(your_url) |> 
  req_headers(
    "X-Naver-Client-ID" = your_ClientID,
    "X-Naver-Client-Secret" = your_Client_Secret
  ) |> 
  req_url_query(
    query = search,
    display = 100,
    start = 1,
    sort = "date"
  ) |> 
  req_perform() |> 
  resp_body_json() 
naver_tb <- tibble(naver = result_naver$items)
naver_res <- naver_tb |> 
  unnest_wider(naver)
naver_res |> slice_head(n = 10)
```
:::

## KOSIS

::: r-fit-text
-   KOSIS 공유서비스 홈페이지(<https://kosis.kr/openapi/>)

    -   상세한 [개발 가이드](https://kosis.kr/openapi/devGuide/devGuide_0101List.do)

-   래퍼(wrapper) 패키지

    -   `kosis` 패키지(<https://cran.r-project.org/web/packages/kosis/>)

    -   주석훈(Seokhoon Joo)

-   함수

    -   `getStatData()`

    -   `getStatDataFromURL()`
:::

## 생성형 AI

-   OpenAI, Google Generative AI, Moonshot AI 등 다양한 생성형 AI와 API를 통한 상호작용 가능

    -   예: GenAI(<https://genai.gd.edu.kg/>)

![[https://genai.gd.edu.kg/](https://genai.gd.edu.kg/){style="font-size:0.75rem"}](GenAI.gif)

# [데이터 불러오기]{style="color:coral"}

## `readr` 패키지

![[https://readr.tidyverse.org/](https://readr.tidyverse.org/){.uri style="font-size:0.75rem"}](images/clipboard-1251213286.png){fig-align="center"}

## `readr` 패키지 {.smaller}

| Names          | Formats                                    |
|----------------|--------------------------------------------|
| `read_csv()`   | 콤마분리(comma-separated values, CSV) 형식 |
| `read_csv2()`  | 세미콜론분리(semicolon-separated) 형식     |
| `read_tsv()`   | 탭구분(tab-limited) 형식                   |
| `read_delim()` | 여타의 구분 형식                           |
| `read_fwf()`   | 고정폭(fixed-width) 형식                   |
| `read_table()` | 공백구분 형식                              |
| `read_log()`   | 아파치 형식(Apache-style)의 로그 파일      |

## 관련 패키지 {.smaller}

::: {layout="[30,30, 30]" layout-valign="center"}
![[https://readxl.tidyverse.org/](https://readxl.tidyverse.org/){style="font-size:0.75rem"}](images/clipboard-2419843589.png)

![[https://ycphs.github.io/openxlsx/](https://ycphs.github.io/openxlsx/){style="font-size:0.75rem"}](images/clipboard-2386206028.png)

![[https://googlesheets4.tidyverse.org/](https://googlesheets4.tidyverse.org/){style="font-size:0.75rem"}](images/clipboard-812069546.png)
:::

-   [`readxl`](https://readxl.tidyverse.org/) 패키지: `read_xls(), read_xlsx(), read_excel()`

## 웹데이터 불러오기: `readr` 패키지

::: panel-tabset
## Code

```{r}
#| echo: true
#| eval: false
library(tidyverse)
library(readr)
read_csv("https://pos.it/r4ds-students-csv")
```

## Result

```{r}
library(tidyverse)
library(readr)
read_csv("https://pos.it/r4ds-students-csv")
```
:::

## 웹데이터 불러오기: `openxlsx` 패키지

::: panel-tabset
## Code

```{r}
#| echo: true
#| eval: false
library(openxlsx)
read.xlsx("https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx")
```

## Result

```{r}
library(openxlsx)
read.xlsx("https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx")
```
:::

## 웹데이터 불러오기: `googlesheet4` 패키지

::: panel-tabset
## Code

```{r}
#| echo: true
#| eval: false
library(googlesheets4)
gs4_deauth()
read_sheet("https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077")
```

## Result

```{r}
library(googlesheets4)
gs4_deauth()
read_sheet("https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077")
```
:::

# [데이터 정리하기]{style="color:coral"}

## 테이블 데이터: 데이터 프레임

|              | 변수 1 | 변수 2 | 변수 3 | ... | 변수 *K* |
|--------------|--------|--------|--------|-----|----------|
| 관측개체 1   |        |        |        |     |          |
| 관측개체 2   |        |        |        |     |          |
| 관측개체 3   |        |        |        |     |          |
| 관측개체 4   |        |        |        |     |          |
| ...          |        |        |        |     |          |
| 관측개체 *n* |        |        |        |     |          |

## tibble 패키지

![[https://tibble.tidyverse.org/](https://tibble.tidyverse.org/){.uri style="font-size:0.75rem"}](images/clipboard-3459494907.png){fig-align="center"}

## tibble 객체 vs. data.frame 객체

-   tibble 객체: `tidyverse`의 공식적 데이터 프레임 객체

-   data.frame 객체: Base R의 공식적 데이터 프레임 객체

![](images/clipboard-2404269740.png){fig-align="center" width="720"}

## `tidyr` package

![[https://tidyr.tidyverse.org/](https://tidyr.tidyverse.org/){.uri style="font-size:0.75rem"}](images/clipboard-1046439731.png){fig-align="center"}

## 타이디(tidy) 데이터의 개념

![[https://allisonhorst.com/other-r-fun](https://allisonhorst.com/other-r-fun){style="font-size:0.75rem"}](images/clipboard-4067066416.png)

## 타이디(tidy) 데이터의 개념

![[https://allisonhorst.com/other-r-fun](https://allisonhorst.com/other-r-fun){style="font-size:0.75rem"}](images/clipboard-3412852372.png)

## 타이디(tidy) 데이터의 개념

-   개별 변수(variable)는 열(column) 하나를 차지한다. 즉, 개별 열에는 하나의 변수가 위치한다.

-   개별 관측개체(observation)는 하나의 행(row)을 차지한다. 즉, 개별 행에는 하나의 관측개체가 위치한다.

-   개별 값(value)은 하나의 셀(cell)을 차지한다. 즉, 개별 셀에는 하나의 값이 위치한다.

## 예시: table1

```{r}
#| echo: true
library(tidyverse)
table1
```

## 예시: table2

```{r}
#| echo: true
table2
```

## 예시: table3

```{r}
#| echo: true
table3
```

## 타이디(tidy) 데이터의 장점

![[https://allisonhorst.com/other-r-fun](https://allisonhorst.com/other-r-fun){style="font-size:0.75rem"}](images/clipboard-3106963859.png){style="font-size:0.75rem"}

## 타이디(tidy) 데이터로 전환하는 핵심 기법

![[https://allisonhorst.com/other-r-fun](https://allisonhorst.com/other-r-fun){style="font-size:0.75rem"}](images/clipboard-1179593338.png){style="font-size:0.75rem" fig-align="center"}

## 넓은 형식 [wide form]{style="font-size:2.5rem;color:gray"} vs. 긴 형식 [long form]{style="font-size:2.5rem;color:gray"}

![](images/clipboard-2491549849.png){fig-align="center"}

## 데이터 늘이기 [Lengthening data]{style="font-size:2.5rem;color:gray"}

::: panel-tabset
## table4a

```{r}
#| echo: true
table4a
```

## Result

```{r}
#| echo: true
table4a |> 
  pivot_longer(
    cols = c(`1999`, `2000`),
    names_to = "year", 
    values_to = "cases"
  )
```
:::

## 데이터 늘이기 [Lengthening data]{style="font-size:2.5rem;color:gray"}

![](images/clipboard-2601245679.png)

## 데이터 넓히기 [Widening data]{style="font-size:2.5rem;color:gray"}

::: panel-tabset
## table2

```{r}
#| echo: true
table2
```

## Result

```{r}
#| echo: true
table2 |> 
  pivot_wider(
    id_cols = c(country, year),
    names_from = type, 
    values_from = count
  )
```
:::

## 데이터 넓히기 [Widening data]{style="font-size:2.5rem;color:gray"}

![](images/clipboard-3400622461.png)

## 데이터 결합하기: `dplyr` 패키지

![[https://dplyr.tidyverse.org/](https://dplyr.tidyverse.org/){.uri style="font-size:0.75rem"}](images/clipboard-3059639685.png){fig-align="center"}

## 조인의 개념 {.smaller}

-   두 개의 데이터 프레임을 공통키(common key)를 활용하여 하나의 데이터 프레임으로 결합(join)하는 과정

    -   공통키: 두 개의 데이터 프레임에 공통적으로 포함되어 있는 식별자(identifier)

-   대응행(match row)과 비대응행(non-match row)

    -   대응행: 동일한 공통키 값을 가진 두 데이터 프레임의 행

    -   비대응행: 한 데이터 프레임에만 존재하는 공통키 값을 가진 행

-   조인의 결과

    -   열(변수)이 늘어나므로 데이터는 넓어짐

    -   행은 조인의 방식에 따라 변화가 없을 수도 있고, 짧아질수도 있고, 길어질 수도 있음

## 조인의 유형

::: r-fit-text
-   inner_join(): 대응행만으로 결합

-   full_join(): 대응행과 비대응행 모두를 결합

-   [left_join()]{style="color:coral"}: 첫 번째 변수는 그대로 둔 상태에서 두 번째 변수의 대응행만 결합

-   right_join(): 두 번째 변수는 그대로 둔 상태에서 첫 번째 변수의 대응행만 결합

-   semi_join(): 두 번째 변수에 대응행이 존재하는 첫 번째 변수의 행만 취함

-   anti_join(): 두 번째 변수에 대응행이 존재하지 않는 첫 번째 변수의 행만 취함
:::

## 조인의 유형

![[https://statisticsglobe.com/r-dplyr-join-inner-left-right-full-semi-anti](https://statisticsglobe.com/r-dplyr-join-inner-left-right-full-semi-anti){.uri style="font-size:0.75rem"}](https://statisticsglobe.com/wp-content/uploads/2019/04/dplyr-data-join-functions-overview_inner_join-left_join-right_join-full_join-semi_join-anti_join.png)
